# auto-generated by grc.converter

id: ettus_rfnoc_streamer_radio
label: 'RFNoC: Radio'
flags: [throttle, python ]

parameters:
-   id: radio_index
    label: Radio Select
    dtype: enum
    options: ['0', '1']
    option_labels: [A, B]
-   id: num_channels
    label: Num Channels
    dtype: int
    default: 1
    options: [2, 1]
    option_labels: [2 Channels, 1 Channel]
    hide: part
-   id: direction
    label: Mode
    dtype: enum
    options: [tx, rx]
    option_attributes:
        hide_sink: [none, all]
        hide_source: [all, none]
-   id: cpu_format
    label: Host Format
    dtype: enum
    options: [fc32, sc16, s16, item32]
    option_labels: [Complex float32, Complex int16, Real int16, VITA word32]
    option_attributes:
        type: [fc32, sc16, s16, s32]
    hide: part
-   id: otw_format
    label: Device Format
    dtype: enum
    options: [sc16, s16]
    option_labels: [Complex int16, Real int16]
    option_attributes:
        type: [sc16, s16]
    hide: part
-   id: stream_args
    label: Stream Args
    dtype: string
-   id: source
    label: MB Clock Source
    dtype: string
    default: '"internal"'
    options: ['"internal"', '"external"', '"gpsdo"']
    option_labels: [Internal, External, GPSDO]
-   id: rate
    label: Sampling Rate
    category: RF Options
    dtype: real
    default: samp_rate
-   id: freq0
    label: 'Ch0: Center Frequency'
    category: RF Options
    dtype: real
    default: 1.982e9
    hide: ${ ('none' if num_channels > 0 else 'all') }
-   id: gain0
    label: 'Ch0: Gain'
    category: RF Options
    dtype: real
    default: '20'
    hide: ${ ('none' if num_channels > 0 else 'all') }
-   id: ant0
    label: 'Ch0: Antenna'
    category: RF Options
    dtype: string
    options: ['"TX/RX"', '"RX1"', '"RX2"']
    option_labels: [TX/RX, RX1, RX2]
    hide: ${ ('none' if num_channels > 0 else 'all') }
-   id: lo_source0
    label: 'Ch0: LO Source'
    category: RF Options
    dtype: string
    default: '"internal"'
    options: ['"internal"', '"companion"', '"external"']
    option_labels: [Internal, Companion, External]
    hide: ${ ('none' if (num_channels > 0 and not hide_lo_controls) else 'all') }
-   id: lo_export0
    label: 'Ch0: LO Export'
    category: RF Options
    dtype: bool
    default: 'False'
    options: ['True', 'False']
    hide: ${ ('none' if (num_channels > 0 and not hide_lo_controls) else 'all') }
-   id: rx_bandwidth0
    label: 'Ch0: Analog Bandwidth (Hz)'
    category: RF Options
    dtype: real
    default: 56e6
-   id: dcenable0
    label: 'Ch0: DC Offset Cancellation'
    category: RF Options
    dtype: enum
    options: ['True', 'False']
    option_labels: [enabled, disabled]
-   id: freq1
    label: 'Ch1: Center Frequency'
    category: RF Options
    dtype: real
    default: 1.982e9
    hide: ${ ('none' if num_channels > 1 else 'all') }
-   id: gain1
    label: 'Ch1: Gain'
    category: RF Options
    dtype: real
    default: '20'
    hide: ${ ('none' if num_channels > 1 else 'all') }
-   id: ant1
    label: 'Ch1: Antenna'
    category: RF Options
    dtype: string
    options: ['"TX/RX"', '"RX1"', '"RX2"']
    option_labels: [TX/RX, RX1, RX2]
    hide: ${ ('none' if num_channels > 1 else 'all') }
-   id: lo_source1
    label: 'Ch1: LO Source'
    category: RF Options
    dtype: string
    default: '"internal"'
    options: ['"internal"', '"companion"', '"external"']
    option_labels: [Internal, Companion, External]
    hide: ${ ('none' if (num_channels > 1 and not hide_lo_controls) else 'all') }
-   id: lo_export1
    label: 'Ch1: LO Export'
    category: RF Options
    dtype: bool
    default: 'False'
    options: ['True', 'False']
    hide: ${ ('none' if (num_channels > 1 and not hide_lo_controls) else 'all') }
-   id: rx_bandwidth1
    label: 'Ch1: Analog Bandwidth (Hz)'
    category: RF Options
    dtype: real
    default: 56e6
    hide: ${ ('none' if num_channels > 1 else 'all') }
-   id: dcenable1
    label: 'Ch1: DC Offset Cancellation'
    category: RF Options
    dtype: enum
    options: ['True', 'False']
    option_labels: [enabled, disabled]
    hide: ${ ('none' if num_channels > 1 else 'all') }
-   id: device_index
    label: Device Select
    category: RFNoC Config
    dtype: int
    default: '-1'
    hide: ${ ('part' if int(device_index) < 0 else 'none') }
-   id: grvlen
    label: Force Vector Length
    category: RFNoC Config
    dtype: int
    default: '1'
    hide: ${ 'part' if grvlen == 1 else 'none' }
-   id: hide_lo_controls
    label: Show LO Controls
    category: Advanced
    dtype: bool
    default: 'True'
    options: ['False', 'True']
    option_labels: ['Yes', 'No']
    hide: part

inputs:
-   domain: rfnoc
    dtype: ${ cpu_format.type }
    vlen: ${ grvlen }
    multiplicity: ${ num_channels }
    optional: true
    hide: ${ direction.hide_sink }

outputs:
-   domain: rfnoc
    dtype: ${ cpu_format.type }
    vlen: ${ grvlen }
    multiplicity: ${ num_channels }
    optional: true
    hide: ${ direction.hide_source }

templates:
    imports: import ettus
    make: |
        ettus.rfnoc_radio(
            self.device3,
            uhd.stream_args( # Tx Stream Args
                cpu_format="${cpu_format}",
                otw_format="${otw_format}",
                args=${ stream_args if str(direction) == "tx" else "''" },
            ),
            uhd.stream_args( # Rx Stream Args
                cpu_format="${cpu_format}",
                otw_format="${otw_format}",
                args=${ stream_args if str(direction) == "rx" else "''" },
            ),
            ${radio_index}, ${device_index}
        )
        self.${id}.set_rate(${rate})

        self.${id}.set_${direction}_freq(${freq0}, 0)
        self.${id}.set_${direction}_gain(${gain0}, 0)
        self.${id}.set_${direction}_dc_offset(${dcenable0}, 0)

        % if context.get('num_channels')() > 1:
        self.${id}.set_${direction}_freq(${freq1}, 1)
        self.${id}.set_${direction}_gain(${gain1}, 1)
        self.${id}.set_${direction}_dc_offset(${dcenable1}, 1)
        % endif

        % if context.get('direction')() == "rx":
        self.${id}.set_rx_bandwidth(${rx_bandwidth0}, 0)
        % if context.get('num_channels')() > 1:
        self.${id}.set_rx_bandwidth(${rx_bandwidth1}, 1)
        % endif
        % endif

        % if context.get('ant0')():
        self.${id}.set_${direction}_antenna(${ant0}, 0)
        % if context.get('num_channels')() > 1 and context.get('ant1')():
        self.${id}.set_${direction}_antenna(${ant1}, 1)
        % endif
        % endif

        % if context.get('direction')() == "rx" and not context.get('hide_lo_controls')():
        self.${id}.set_rx_lo_source(${lo_source0},  "all", 0)
        self.${id}.set_rx_lo_export_enabled(${lo_export0}, "all", 0)
        % if context.get('num_channels')() > 1:
        self.${id}.set_rx_lo_source(${lo_source1},  "all", 1)
        self.${id}.set_rx_lo_export_enabled(${lo_export1}, "all", 1)
        % endif
        % endif

        self.${id}.set_clock_source(${source})
    callbacks:
    - self.${id}.set_rate(${rate})
    - self.${id}.set_${direction}_freq(${freq0}, 0)
    - self.${id}.set_${direction}_freq(${freq1}, 1)
    - self.${id}.set_${direction}_gain(${gain0}, 0)
    - self.${id}.set_${direction}_gain(${gain1}, 1)
    - self.${id}.set_${direction}_antenna(${ant0}) if ${ant0} else lambda a: None
    - self.${id}.set_${direction}_antenna(${ant1}) if ${ant1} else lambda a: None
    - self.${id}.set_rx_lo_export_enabled(${lo_export0}, "all", 0) if str(${direction}) == "rx" and not ${hide_lo_controls} else lambda ex: None
    - self.${id}.set_rx_lo_export_enabled(${lo_export1}, "all", 1) if str(${direction}) == "rx" and not ${hide_lo_controls} else lambda ex: None
    - self.${id}.set_rx_lo_source(${lo_source0}, "all", 0) if str(${direction}) == "rx" and not ${hide_lo_controls} else lambda src: None
    - self.${id}.set_rx_lo_source(${lo_source1}, "all", 1) if str(${direction}) == "rx" and not ${hide_lo_controls} else lambda src: None
    - self.${id}.set_clock_source(${source})

file_format: 1
