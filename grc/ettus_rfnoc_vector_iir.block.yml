# auto-generated by grc.converter

id: ettus_rfnoc_streamer_vector_iir
label: 'RFNoC: Vector IIR'

parameters:
-   id: vlen
    label: Vector Length
    dtype: int
    default: '256'
    hide: ${ 'part' if vlen == 1 else 'none' }
-   id: alpha
    label: Alpha
    dtype: float
    default: '0.984375'
-   id: beta
    label: Beta
    dtype: float
    default: '0.015625'
-   id: block_index
    label: Vector-IIR Select
    category: RFNoC Config
    dtype: int
    default: '-1'
    hide: ${ ('part' if int(block_index) < 0 else 'none') }
-   id: device_index
    label: Device Select
    category: RFNoC Config
    dtype: int
    default: '-1'
    hide: ${ ('part' if int(device_index) < 0 else 'none') }
-   id: fpga_module_name
    label: FPGA Module Name
    category: RFNoC Config
    dtype: string
    default: noc_block_vector_iir
    hide: all

inputs:
-   domain: rfnoc
    dtype: complex
    vlen: ${ vlen }

outputs:
-   domain: rfnoc
    dtype: complex
    vlen: ${ vlen }
asserts:
- ${ (vlen > 0 and vlen <= 4096) }
- ${ (alpha >= 0.0 and alpha <= 1.0) }
- ${ (beta >= 0.0 and beta <= 1.0) }

templates:
    imports: import ettus
    make: |-
      ettus.rfnoc_generic(
          self.device3,
          uhd.stream_args( # TX Stream Args
              cpu_format="fc32",
              otw_format="sc16",
              args="spp={},alpha={},beta={}".format(${vlen}, ${alpha}, ${beta}),
          ),
          uhd.stream_args( # TX Stream Args
              cpu_format="fc32",
              otw_format="sc16",
              args="spp={},alpha={},beta={}".format(${vlen}, ${alpha}, ${beta}),
          ),
          "VectorIIR", ${block_index}, ${device_index},
      )
      self.${id}.set_arg_double("alpha", ${alpha})
      self.${id}.set_arg_double("beta", ${beta})
    callbacks:
    - set_arg_double("alpha", ${alpha})
    - set_arg_double("beta", ${beta})

file_format: 1
